version: '2'
services:
  api-service:
    container_name: api-service-container
    build:
      context: api-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    image: api-service:latest
    networks:
      - container-practice-network
    environment:
      EMPLOYEE_SERVICE_URL: http://employee-service:8082
      EMPLOYEE_SERVICE_USERNAME: service
      EMPLOYEE_SERVICE_PASSWORD: s3rv1c3
      ZIPKIN_SERVICE_URL: http://zipkin-service:9411
  employee-service:
      container_name: employee-service-container
      build:
        context: employee-service
        dockerfile: Dockerfile
      image: employee-service:latest
      networks:
        - container-practice-network
      environment:
        DB_URL: jdbc:mysql://employee-service-db:3306/employees-db
        DB_USERNAME: miztli
        DB_PASSWORD: 4321
        ZIPKIN_SERVICE_URL: http://zipkin-service:9411
      depends_on:
        employee-service-db:
          condition: service_healthy
  employee-service-db:
    container_name: mysql-server-container
    image: mysql:8.0
    networks:
      - container-practice-network
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_USER: miztli
      MYSQL_PASSWORD: 4321
      MYSQL_DATABASE: employees-db
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD || exit 1
      start_period: 5s
      interval: 7s
      timeout: 5s
      retries: 2
  zipkin-service:
    container_name: zipkin-service-container
    image: miztli-zipkin-service:latest
    ports:
      - "9411:9411"
    build:
      context: zipkin-service
      dockerfile: Dockerfile
    networks:
      - container-practice-network
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - container-practice-network
  grafana:
      image: grafana/grafana:9.5.2
      container_name: grafana
      ports:
        - "3000:3000"
      restart: unless-stopped
      volumes:
        - ./grafana:/etc/grafana/provisioning/datasources
      networks:
        - container-practice-network
networks:
  container-practice-network:
    driver: bridge